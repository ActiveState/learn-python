name: ActivePython application
env:
  ACTIVESTATE_CLI_CACHEDIR: ${{ github.workspace }}/.cache        
  ACTIVESTATE_API_KEY: ${{ secrets.ACTIVESTATE_API_KEY }}  
on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Install State Tool (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        (New-Object Net.WebClient).DownloadFile('https://platform.activestate.com/dl/cli/install.ps1', 'install.ps1'); 
        Invoke-Expression -Command "$Env:GITHUB_WORKSPACE\install.ps1 -n -t $Env:GITHUB_WORKSPACE"
      shell: powershell
    - name: Install State Tool (Linux&Mac)            
      if: matrix.os != 'windows-latest'      
      run: sh <(curl -q https://platform.activestate.com/dl/cli/install.sh) -n
    - name: Update project (Linux&Mac)            
      if: matrix.os != 'windows-latest'      
      run: state pull
    - name: Update project (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Set-Location -Path $Env:GITHUB_WORKSPACE
        Invoke-Expression -Command "$Env:GITHUB_WORKSPACE\state.exe pull"
    - name: Cache state tool cache
      uses: actions/cache@v1
      env:
        cache-name: cache-platform-build
      with:
        path: ${{ env.ACTIVESTATE_CLI_CACHEDIR }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('activestate.yaml') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Lint with flake8 (Linux&Mac)
      if: matrix.os != 'windows-latest'
      run: state run lints
    - name: Test with pytest (Linux&Mac)
      if: matrix.os != 'windows-latest'
      run: state run tests
    - name: Lint with flake8 (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Set-Location -Path $Env:GITHUB_WORKSPACE
        Invoke-Expression -Command "$Env:GITHUB_WORKSPACE\state.exe run lints"
    - name: Test with pytest (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Set-Location -Path $Env:GITHUB_WORKSPACE
        Invoke-Expression -Command "$Env:GITHUB_WORKSPACE\state.exe run tests"
